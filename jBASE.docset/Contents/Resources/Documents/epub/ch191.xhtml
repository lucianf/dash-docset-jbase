<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="function">JBASECOREDUMP</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="jbasecoredump-function" class="section level1">
<a class="dashingAutolink" name="autolink-190"></a><a class="dashAnchor" name="//apple_ref/cpp/Function/JBASECOREDUMP"></a><h1 class="function">JBASECOREDUMP</h1>
<p>JBASECOREDUMP is used as a diagnostic tool for applications. It allows a snapshot of the application to be dumped to an external file for later analysis.</p>
<ul>
<li>The JBASECOREDUMP function will stop the execution of a jbc program or subroutine.</li>
<li>The applications snapshot is also saved in the logs.</li>
<li>The filename for the external file will always be unique.</li>
<li>If called via jAgent an exception will be thrown.</li>
</ul>
<div id="command-syntax-150" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>JBASECOREDUMP(expression1, expression2)</code></pre>
</div>
<div id="syntax-elements-103" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p><strong>expression1</strong> should evaluate to a string:</p>
<p>If assigned a value, expression1 will be used as the extension for the external text file created to hold execution snapshot.</p>
<pre><code>rc = JBASECOREDUMP(&#39;SERVICE&#39;, 0)</code></pre>
<p>This will create the file with name structured as:</p>
<p>&#34;JBASECOREDUMP.&lt;&lt;UUID&gt;&gt;.&lt;&lt;expression1&gt;&gt;&#34;, e.g.:</p>
<pre>    JBASECOREDUMP.a57d07cc-6539-470f-9959-24ed7c715f4f.SERVICE.</pre>
<p>If a null string is used:</p>
<pre><code>rc = JBASECOREDUMP(&#39;&#39;, 0)</code></pre>
<p>This will create the file with name structured as:</p>
<p>&#34;JBASECOREDUMP.&lt;&lt;UUID&gt;&gt;, e.g.:</p>
<pre>    JBASECOREDUMP.a57d07cc-6539-470f-9959-24ed7c715f4f</pre>
<p><strong>expression2</strong> should evaluate to a numeric integer:</p>
<pre>    0: Add all varables to the external text file.
    1: Suppess any UNASSIGNED varables saved to the external file.</pre>
</div>
<div id="notes-91" class="section level2">
<h2>NOTES</h2>
<p>jBC functionality will be affected in the following areas:</p>
<ul>
<li>Calling from a jbc subroutine.</li>
<li>Running a program in a jsh.</li>
<li>External text filenames are now unique for coredump files.</li>
<li>Calling process started via EXECUTE/PERFORM from within a jbc program.</li>
<li>When called via jAgent, using a jbc subroutine.</li>
</ul>
<p><em>Calling from a jbc subroutine.</em></p>
<p>When the JBASECOREDUMP function is called from a jbc program it will stop execution. The call stack is saved to a file, and also saved to the logs. Each core dump now is assigned a unique ID.</p>
<p><em>Running a program in a jsh.</em></p>
<p>If called from a program while in a jSH, a message is now displayed along with the UUID for the core dump, you can use this to locate the stack trace in the logs.</p>
<pre>    &lowast;&lowast; Error [ JBASECOREDUMP ] &lowast;&lowast; Program Aborted, Coredump UUID: &lt;&lt;UUID&gt;&gt;</pre>
<p><em>Calling process started via EXECUTE/PERFORM from within a jbc program.</em></p>
<p>If JBASECOREDUMP is called from a process started via EXECUTE/PERFORM from a jbc program, use RETURNING/SETTING to capture the output associated with any error messages the executing program issues.</p>
<pre><code>EXECUTE &#34;MYPROGRAM&#34; CAPTURING junk SETTING rc
     * rc&lt;1,1&gt; holds the error code &#34;JBASECOREDUMP&#34;.
     * rc&lt;1,2&gt; holds the UUID for the core dump.</code></pre>
<p>Because all JBASECOREDUMP&#39;s are logged you can use this UUID to check the log files.</p>
<p><em>When called via jAgent, using a jbc subroutine.</em></p>
<p>A new exception type has been created to return the UUID to the client application. (JSubroutineCoreDumpException)</p>
<p>The following is a simple example of how to check for core dumps.</p>
<pre>    try {
      _connection.call(&#34;CALLCOREDUMP_WITH_FILENAME&#34;, null);
    }
    catch (const JSubroutineCoreDumpException &amp;e) {
      const std::string uuid = e.getMessage()-&gt;c_str();
      // handle exception
    }</pre>
<p>Use this UUID to check on the server for what went wrong. The Java and C# clients have also been updated to handle this new exception type.</p>
</div>
<div id="example-118" class="section level2">
<h2>EXAMPLE</h2>
<p>example.b:</p>
<pre><code>001 rc = JBASECOREDUMP(&#39;ERRORFILE&#39;, &#39;&#39;)</code></pre>
<p>Compile:</p>
<pre>    jcompile example.b</pre>
<p>run:</p>
<pre>    &lowast;&lowast; Error [ JBASECOREDUMP ] &lowast;&lowast; Program Aborted,
    Coredump UUID: 4d5a252a-c009-4aec-9e1f-73d3251c6b81</pre>
<pre>     dir JBASECOREDUMP&lowast;
    JBASECOREDUMP.4d5a252a-c009-4aec-9e1f-73d3251c6b81.ERRORFILE</pre>
<pre>    ct . JBASECOREDUMP.4d5a252a-c009-4aec-9e1f-73d3251c6b81.ERRORFILE
    JBASECOREDUMP.4d5a252a-c009-4aec-9e1f-73d3251c6b81.ERRORFILE
    001 jBASE Core dump created at Fri Feb 24 11:21:10 2012
    002 UUID: 4d5a252a-c009-4aec-9e1f-73d3251c6b81
    003 Program example , port 87 , process id 3488
    004
    005 CALL/GOSUB stack
    006
    007 Backtrace:
    008 #0: jmainfunction.b:1
    009 #1: example.b:1 -&gt; Line 1 , Source jmainfunction.b
    010
    011 Backtrace log:
    012 Program jmainfunction.b, Line 1, Stack level 0
    013 Line 0 , Source jmainfunction.b , Level 0
    014 &gt;&gt;&gt; Program example.b, Line 1, Stack level 1
    015 Line 1 , Source jmainfunction.b
    016
    017 All the defined VAR&#39;s in the program
    018
    019 SUBROUTINE main()
    020 00000000006BEE90 : rc : (V) String : 0 bytes at address 0000000055740A58 :</pre>
<p>Locating entry in the logs using the UUID.</p>
<pre>    find &#34;4d5a252a-c009-4aec-9e1f-73d3251c6b81&#34; %TAFC_HOME%\log\default</pre>
<p>The following lines may appear in the log file:</p>
<pre>    ---- C:\R12\LOG\DEFAULT\EXAMPLE.HML0001.JBCUSER.LOG.ERROR.20120224-112110.3488
    E0224 11:21:10.737900 5832 tafc_logger_c_api.cpp:33]
    Coredump file: JBASECOREDUMP.4d5a252a-c009-4aec-9e1f-73d3251c6b81.ERRORFILE
    E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    UUID: 4d5a252a-c009-4aec-9e1f-73d3251c6b81</pre>
<p>Type the following command to display the log file:</p>
<pre>    CT %TAFC_HOME%\LOG\DEFAULT\EXAMPLE.HML0001.JBCUSER.LOG.ERROR.20120224-
       112110.3488</pre>
<p>The below log file will appear &#34;example.HML0001.JBCUSER.LOG.ERROR.20120224-112110.3488&#34;:</p>
<pre>    001 Log file created at: 2012/02/24 11:21:10
    002 Running on machine: HML0001
    003 Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
    004 E0224 11:21:10.737900 5832 tafc_logger_c_api.cpp:33] Coredump file:
        JBASECOREDUMP.4d5a252a-c009-4aec-9e1f-73d3251c6b81.ERRORFILE
    005 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] jBASE Core dump created
        at Fri Feb 24 11:21:10 2012
    006 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] UUID:
        4d5a252a-c009-4aec-9e1f-73d3251c6b81
    007 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Program example , port
        87, process id 3488
    008 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    009 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] CALL/GOSUB stack
    010 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    011 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Backtrace:
    012 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] #0: jmainfunction.b:1219
    013 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] #1: example.b:1-&gt;Line 1,
        Source jmainfunction.b
    014 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    015 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Backtrace log:
    016 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Program jmainfunction.b,
        Line 1, Stack level 0
    017 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Line 0 ,
        Source jmainfunction.b , Level 0
    018 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] &gt;&gt;&gt; Program example.b,
        Line 1, Stack level 1
    019 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] Line 1 ,
        Source jmainfunction.b
    020 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    021 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] All the defined VAR&#39;s
        in the program
    022 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33]
    023 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] SUBROUTINE main()
    024 E0224 11:21:10.739899 5832 tafc_logger_c_api.cpp:33] 00000000006BEE90 :
        rc : (V) String : 0 bytes at address 0000000055740A58 :</pre>
</div>
</div>



</body></html>