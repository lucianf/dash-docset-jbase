<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">INPUT</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="input-statement" class="section level1">
<a class="dashingAutolink" name="autolink-174"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/INPUT"></a><h1 class="statement">INPUT</h1>
<p>The INPUT statement allows the program to collect data from the current input device, which will normally be the terminal keyboard but may be stacked input from the same or separate program.</p>
<div id="command-syntax-135" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>INPUT {@ (expression1 {, expression2 )}{:} Var{{, expression3}, expression4} \
      {:}{_} { WITH expression5 } { FOR expression6 THEN | ELSE statements }</code></pre>
</div>
<div id="syntax-elements-90" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p><strong>@(expression1, expression2)</strong> allows the screen cursor to be positioned to the specified column and row before the input prompt is sent to the screen. The syntax for this is the same as the @( ) function described earlier.</p>
<p><strong>Var</strong> is the variable in which the input data is to be stored.</p>
<p><strong>expression3</strong>, when specified, should evaluate to a numeric value. This will cause input to be terminated with an automatic newline sequence after exactly this number of characters has been input. If the _ option is specified with expression4 then the automatic newline sequence is not specified but any subsequent input characters are belled to the terminal and thrown away.</p>
<p><strong>expression4</strong> when specified, should evaluate to a sequence of 1 to 3 characters. The first character will be printed expression3 times to define the field on the terminal screen. At the end of the input if less than expression3 characters were input then the rest of the field is padded with the second character if it was supplied. If the third character is supplied then the cursor will be positioned after the last character input rather than at the end of the input field.</p>
<p>The : option, when specified, suppress the echoing of the newline sequence to the terminal. This will leave the cursor positioned after the last input character on the terminal screen.</p>
<p>WITH expression5 allows the default input delimiter (the newline sequence) to be changed. When specified, expression5, should evaluate to a string of up to 256 characters, each of which may delimit the input field. If this clause is used then the newline sequence is removed as a delimiter and must be specified explicitly within expression5 as CHAR(10).</p>
<p>The &#34;FOR&#34; clause allows the &#34;INPUT&#34; statement to time out after a specified waiting period instead of blocking as normal Expression6 should evaluate to a numeric value, which will be taken as the number of deci-seconds (tenths of a second) to wait before timing out. The time-out value is used as the time between each keystroke and should a time-out occur, Var would hold the characters that were input until the time-out.</p>
<p>The FOR clause requires either the THEN and ELSE clauses or both; if no time-out occurs the THEN clause is taken. If a time-out does occur, the ELSE clause is taken.</p>
</div>
<div id="notes-86" class="section level2">
<h2>NOTES</h2>
<p>The INPUT statement will always examine the data input stack before requesting data from the input device. If data is present on the stack then it is used to satisfy INPUT statements one field at a time until the stack is exhausted. Once exhausted, the INPUT statement will revert to the input device for further input. There is no way (by default) to input a null field to the INPUT@ statement. If the INPUT@ statement receives the newline sequence only as input, then the Var will be unchanged. Use the INPUTNULL statement to define a character that indicates a NULL input.</p>
<p>Use the CONTROL-CHARS command to control whether or not control characters (i.e. those outside the range x&#39;1F&#39; - x&#39;7F&#39;) are accepted by INPUT.</p>
<p>See also: <a href="#IN">IN</a>, <a href="#INPUTNULL">INPUTNULL</a>.</p>
</div>
<div id="example-104" class="section level2">
<h2>EXAMPLE</h2>
<p>Ask user for an input; time limit is 60 seconds; every 3 seconds the remaining time is updated on user screen.</p>
<pre><code>   V.TIMEOUT = 60
   GOSUB UPD.CNT
   V.ANS = &#39;&#39;
   LOOP
   WHILE V.ANS EQ &#39;&#39; DO
      INPUT V.ANS, 1 : FOR 30 ELSE
         V.TIMEOUT -= 3
         IF V.TIMEOUT LE 0 THEN BREAK
         GOSUB UPD.CNT
      END
   REPEAT
   IF V.ANS NE &#39;&#39; THEN CRT &#39;The choice was&#39;, DQUOTE(V.ANS)
   ELSE CRT &#34;The choice wasn&#39;t done&#34;
   STOP
UPD.CNT:
   CRT @(0):&#39;Seconds left: &#39;: FMT(V.TIMEOUT, &#39;2R&#39;) : &#39;. Your choice&#39;:
   RETURN</code></pre>
</div>
<div id="example-2-6" class="section level2">
<h2>EXAMPLE 2</h2>
<p>Pad the input field.</p>
<p>Code:</p>
<pre><code>   CRT @(-1)
   INPUT @(17,2):the_input,50,&#39;_..&#39;:_</code></pre>
<p>User screen:</p>
<pre><code>                    ? _________________________________________________</code></pre>
<p>See also: <a href="#PROMPT">PROMPT</a>.</p>
</div>
</div>



</body></html>