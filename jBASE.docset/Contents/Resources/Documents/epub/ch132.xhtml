<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">EXECUTE</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="execute-statement" class="section level1">
<a class="dashingAutolink" name="autolink-131"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/EXECUTE"></a><h1 class="statement">EXECUTE</h1>
<p>The EXECUTE or <a href="#PERFORM">PERFORM</a> statement allows the currently executing program to pause and execute any other UNIX/NT program, including another jBC program or a TAFC command.</p>
<div id="command-syntax-94" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>EXECUTE | PERFORM expression { CAPTURING variable}  \
    { RETURNING | SETTING variable} { PASSLIST {expression}}  \
    { RTNLIST {variable}}{ PASSDATA variable} { RTNDATA variable}</code></pre>
<p>Executes external programs or OS commands; you can intercept screen output and error messages from any program. Passes data, dynamic arrays and lists to executed jBC programs.</p>
</div>
<div id="syntax-elements-58" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p>The PERFORMed expression can be formed from any TAFC construct. The system will not verify that the command exists before executing it. Use a new Bourne Shell to execute a command (sh) by default. The shell type can be changed by preceding the command with a CHAR(255) concatenated with either &#34;k&#34;, &#34;c&#34;, or &#34;s&#34; to signify the Korn shell, C shell or Bourne Shell.</p>
<p>Variables used to pass data to the executed program should have been assigned to a value before using. You can use any variable name to receive data.</p>
<p><em>CAPTURING variable</em></p>
<p>The capturing clause will capture any output that the executing program would normally send to the terminal screen and place it in the variable specified. A field mark in the variable replaces every newline normally sent to the terminal.</p>
<p><em>RETURNING variable or SETTING variable</em></p>
<p>The returning and setting clauses are identical. Both clauses will capture the output associated with any error messages the executing program issues. The first field of the variable will be set to the exit code of the program.</p>
<p><em>PASSLIST variable</em></p>
<p>The PASSLIST clause allows TAFC programs to exchange lists or dynamic arrays between them. The variable should contain the list that the program wishes to pass to the TAFC program it is executing. The program to be executed should be able to process lists, otherwise the list will just be ignored. If the variable name is not specified then the clause will pass the default select list to the executing program.</p>
<p><em>RTNLIST variable</em></p>
<p>If the executed program sets up a list then use the RTNLIST clause to place that list into a specified variable. It places the list in the default list variable if omitted.</p>
<p><em>PASSDATA variable</em></p>
<p>Passes the data in the specified variable to another jBC program, the executing jBC program should retrieve the data using the <a href="#COLLECTDATA">COLLECTDATA</a> statement.</p>
<p><em>RTNDATA variable</em></p>
<p>The RTNDATA statement returns any data passed from an executing jBC program in the specified variable. The executing jBC program should use the RTNDATA statement to pass data back to the calling program.</p>
</div>
<div id="notes-59" class="section level2">
<h2>NOTES</h2>
<p>The clauses may be specified in any order within the statement but only one of each clause may exist.</p>
</div>
<div id="example-82" class="section level2">
<h2>EXAMPLE</h2>
<pre><code>   V.CMD = &#39;COUNT .&#39;
   HUSH ON
   EXECUTE V.CMD RETURNING V.CNT
   HUSH OFF
   CRT V.CNT&lt;1,2&gt;     ;* e.g. 15</code></pre>
</div>
<div id="example-2-4" class="section level2">
<h2>EXAMPLE 2</h2>
<pre><code>   EXECUTE &#39;SELECT F.TEMP&#39; :@FM: &#39;SAVE.LIST TEMP-LIST&#39;</code></pre>
</div>
<div id="example-3-2" class="section level2">
<h2>EXAMPLE 3</h2>
<pre><code>   EXECUTE CHAR(255) : &#39;kecho $SHELL&#39;   ;* /usr/bin/ksh</code></pre>
</div>
<div id="example-4-1" class="section level2">
<h2>EXAMPLE 4</h2>
<pre><code>   EXECUTE &#39;df -m&#39; CAPTURING V.OUTPUT
   LOOP
      REMOVE V.LINE FROM V.OUTPUT SETTING V.STATUS
      CRT &#39;[&#39; : V.LINE : &#39;]&#39;
      IF V.STATUS EQ 0 THEN BREAK
   REPEAT</code></pre>
<p>Sample output of the last example:</p>
<pre>    [Filesystem    MB blocks      Free %Used    Iused %Iused Mounted on]
    [/dev/hd4         512.00    276.03   47%    12020    16% /]
    [/dev/hd2        5120.00   1398.12   73%    67516    18% /usr]
    [/dev/hd9var      640.00     95.71   86%    13280    36% /var]
    [/dev/hd3         768.00    505.89   35%     8812     7% /tmp]
    [/dev/hd1         128.00    121.68    5%      185     1% /home]
    [/proc                 -         -    -         -     -  /proc]</pre>
</div>
</div>



</body></html>