<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">SSELECT</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="sselect-statement" class="section level1">
<a class="dashingAutolink" name="autolink-317"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/SSELECT"></a><h1 class="statement">SSELECT</h1>
<p>SSELECT statement is used to create:</p>
<p>A select list of record IDs in sorted order from a jBASE hashed file</p>
<p>A numbered select list of record IDs from a dynamic array (SSELECTN).</p>
<p>A select list of record IDs from a dynamic array (SSELECTV).</p>
<p>You can then access this select list by a subsequent READNEXT statement, which removes one record ID at a time from the list.</p>
<div id="command-syntax-270" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>SSELECT [variable] [ TO list.number|select list ] [ ON ERROR statements ]

SSELECTN [variable] [ TO list.number] [ ON ERROR statements ]

SSELECTV [variable] TO list.variable [ ON ERROR statements ]</code></pre>
<p><strong>variable</strong> can specify a dynamic array or a file variable. If it specifies a dynamic array, the record IDs must be separated by field marks (ASCII 254). If variable specifies a file variable, the file variable must have previously been opened. If variable is not specified, the default file is assumed. If the file is neither accessible nor open, or if variable evaluates to null, the SSELECT statement fails and the program enters the debugger with a run-time error message.</p>
<p>The TO clause specifies the select list that is to be used. list.number is an integer from 0 through 10. If no list.number is specified, select list 0 is used.</p>
<p>The record IDs of all the records in the file forms the list. The record IDs are listed in ascending order. Each record ID is one entry in the list.</p>
<p>Use the SSELECTV statement to store the select list in a named list variable instead of to a numbered select list. list.variable is an expression that evaluates to a valid variable name.</p>
<p><em>The ON ERROR Clause</em></p>
<p>The ON ERROR clause is optional in SSELECT statements. The ON ERROR clause lets you specify an alternative for program termination when a fatal error is encountered during processing of a SSELECT statement.</p>
</div>
<div id="international-mode-24" class="section level2">
<h2>INTERNATIONAL MODE</h2>
<p>When using the SSELECT statement in International Mode, the statement will use the currently configured locale to determine the rules by which each string is considered less than or greater than the other for sort purposes.</p>
</div>
<div id="example-184" class="section level2">
<h2>EXAMPLE</h2>
<pre><code>   OPEN &#39;F.TEMP&#39; TO F.TEMP THEN
      V.ERR = &#39;&#39;
      CLEARFILE F.TEMP SETTING V.ERR
      IF V.ERR NE &#39;&#39; THEN
         CRT &#39;ERROR &#39; : V.ERR
         STOP
      END
   END ELSE
      EXECUTE &#39;CREATE-FILE DATA F.TEMP 1 101 TYPE=J4&#39;
      OPEN &#39;F.TEMP&#39; TO F.TEMP ELSE ABORT 201, &#39;F.TEMP&#39;
   END
   V.REC = &#39;LINE 1&#39; :@FM: &#39;LINE 2&#39; :@FM: &#39;LINE 3&#39;
   WRITE V.REC TO F.TEMP, &#39;REC3&#39;
   WRITE V.REC TO F.TEMP, &#39;REC1&#39;
   WRITE V.REC TO F.TEMP, &#39;REC2&#39;
   SSELECT F.TEMP TO V.LIST
   READNEXT V.ID FROM V.LIST THEN CRT V.ID        ;*  REC1</code></pre>
</div>
<div id="example-2-15" class="section level2">
<h2>EXAMPLE 2</h2>
<p>Using SSELECTV to sort a dynamic array:</p>
<pre><code>   V.RANDOM = &#39;&#39;
   FOR V.I = 1 TO 1000
      V.STRING = &#39;&#39;
      FOR V.J = 1 TO 8
         V.RND = RND(26) + 65
         V.STRING := CHAR(V.RND)        ;* A...Z
      NEXT V.J
      V.RANDOM&lt;-1&gt; = V.STRING
   NEXT V.I
   SSELECTV V.RANDOM TO V.SORTED
   CRT &#39;Got strings from &#39; : V.SORTED&lt;1&gt; : &#39; to &#39; : V.SORTED&lt;1000&gt;</code></pre>
<p>Sample output:</p>
<pre>    Got strings from AALUKTJZ to ZZQTIWFQ</pre>
<p>Or:</p>
<pre>    Got strings from AAGPKJJP to ZZTMYNNX</pre>
</div>
<div id="example-3-4" class="section level2">
<h2>EXAMPLE 3</h2>
<p>Don&#39;t try to sort an array with <strong>SSELECTV</strong> if this array has values or subvalues (they all will be lost - after all, it&#39;s intended to sort just select lists). The correct way to do that is also shown below:</p>
<pre><code>*
init_array = 3 : @VM : &#39;Third row&#39;
init_array&lt;-1&gt; = 2 : @VM : &#39;Second row&#39;
init_array&lt;-1&gt; = 4 : @VM : &#39;Fourth row&#39;
init_array&lt;-1&gt; = 1 : @VM : &#39;First row&#39;
&amp;nbsp;
the_len = DCOUNT(init_array, @FM)
&amp;nbsp;
SSELECTV init_array TO sorted_array
GOSUB SHOW.RESULT
* Output:
* 1
* 2
* 3
* 4
&amp;nbsp;
elem_to_sort = 1     ;* sort by 1st value
GOSUB MAKE.SORT
GOSUB SHOW.RESULT
* Output:
* 1]First row
* 2]Second row
* 3]Third row
* 4]Fourth row
&amp;nbsp;
elem_to_sort = 2     ;* sort by 2nd value
GOSUB MAKE.SORT
GOSUB SHOW.RESULT
* Output:
* 1]First row
* 4]Fourth row
* 2]Second row
* 3]Third row
&amp;nbsp;
RETURN
&amp;nbsp;
MAKE.SORT:
   seek_array = &#39;&#39;
   sorted_array = &#39;&#39;
   FOR i = 1 TO the_len
      LOCATE init_array&lt;i,elem_to_sort&gt; IN seek_array BY &#39;AN&#39; SETTING ins_posn ELSE NULL
      INS init_array&lt;i,elem_to_sort&gt; BEFORE seek_array&lt;ins_posn&gt;
      INS init_array&lt;i&gt; BEFORE sorted_array&lt;ins_posn&gt;
   NEXT i
   RETURN
&amp;nbsp;
SHOW.RESULT:
   FOR i = 1 TO the_len
      CRT OCONV(sorted_array&lt;i&gt;, &#39;MCP&#39;)
   NEXT i
   RETURN</code></pre>
</div>
</div>



</body></html>