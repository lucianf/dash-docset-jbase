<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">READU</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="readu-statement" class="section level1">
<a class="dashingAutolink" name="autolink-282"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/READU"></a><h1 class="statement">READU</h1>
<p>READU statement allows a program to read a record from previously opened file into variable. It respects record locking and locks the specified record for update.</p>
<div id="command-syntax-238" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>READU variable1 FROM {variable2,} expression { SETTING setvar }  \
      { WAIT timeout } { ON ERROR statements } { LOCKED statements }  \
      THEN | ELSE statements</code></pre>
</div>
<div id="syntax-elements-175" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p><strong>variable1</strong> is the identifier into which the record will be read.</p>
<p><strong>variable2</strong> if specified, should be a jBC variable that has previously been opened to a file using the OPEN statement. If variable2 is not specified then the default file is assumed.</p>
<p>The <strong>expression</strong> should evaluate to a valid record key for the file.</p>
<p>If the <strong>SETTING</strong> clause is specified and the read fails, setvar will be set to one of the following values:</p>
</div>
<div id="incremental-file-errors-12" class="section level2">
<h2>INCREMENTAL FILE ERRORS</h2>
<table>
<thead>
<tr class="header">
<th align="left">Code</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">128</td>
<td align="left">No such file or directory</td>
</tr>
<tr class="even">
<td align="left">4096</td>
<td align="left">Network error</td>
</tr>
<tr class="odd">
<td align="left">24576</td>
<td align="left">Permission denied</td>
</tr>
<tr class="even">
<td align="left">32768</td>
<td align="left">Physical I/O error or unknown error</td>
</tr>
</tbody>
</table>
<p>If WAIT clause is specified and the record stated in Variable1 is already locked, READU waits &#39;timeout&#39; milliseconds before executing LOCKED statement. If LOCKED clause is not specified WAIT clause does not effect to the READU behaviour. Without LOCKED clause READU is blocked until the lock is released regardless to the WAIT clause parameter.</p>
<p>If ON ERROR is specified, the statements following the ON ERROR clause will be executed for any of the above Incremental File Errors except error 128.</p>
</div>
<div id="notes-146" class="section level2">
<h2>NOTES</h2>
<p>If the record could not be read because another process already had a lock on the record then one of two actions is taken. If the LOCKED clause was specified in the statement then the statements dependent on it are executed. If no LOCKED clause was specified then the statement blocks (hangs) until the other process releases the lock. Use the SYSTEM (43) function to determine which port has the lock.</p>
<p>If the statement fails to read the record then any statements associated with the ELSE clause will be executed. If the statement successfully reads the record then the statements associated with any THEN clause are executed. Either or both of THEN and ELSE clauses must be specified with the statement.</p>
<p>The lock taken by the READU statement will be released by any of the following events:</p>
<p>The same program with <a href="#WRITE">WRITE</a>, <a href="#WRITEV">WRITEV</a> or <a href="#MATWRITE">MATWRITE</a> statements writes to the record.</p>
<p>The same program with the DELETE statement deletes the record.</p>
<p>The record lock is released explicitly using the <a href="#RELEASE">RELEASE</a> statement.</p>
<p>The program stops normally or abnormally.</p>
<p>When a file is OPENed to a local file variable in a subroutine then the file is closed when the subroutine RETURNS so all locks taken on that file are released, including locks taken in a calling program. Files that are opened to <a href="#COMMON">COMMON</a> variables are not closed so the locks remain intact.</p>
<p>See also: <a href="#WRITE">WRITE</a>, <a href="#WRITEU">WRITEU</a>, <a href="#MATWRITE">MATWRITE</a>, <a href="#MATWRITEU">MATWRITEU</a>, <a href="#RELEASE">RELEASE</a>, and <a href="#DELETE">DELETE</a></p>
</div>
<div id="example-165" class="section level2">
<h2>EXAMPLE</h2>
<pre><code>   OPEN &#39;F.TEMP&#39; TO F.TEMP ELSE
      EXECUTE &#39;CREATE-FILE DATA F.TEMP 1 101 TYPE=J4&#39;
      OPEN &#39;F.TEMP&#39; TO F.TEMP ELSE
         CRT &#39;OPEN FAILED&#39;
         STOP
      END
   END
   READU V.REC FROM F.TEMP, &#39;REC1&#39; LOCKED
      CRT &#39;Lock failure&#39;
      STOP
   END ELSE NULL
   V.REC&lt;-1&gt; = &#39;A field&#39;
   WRITE V.REC TO F.TEMP, &#39;REC1&#39;</code></pre>
</div>
</div>



</body></html>