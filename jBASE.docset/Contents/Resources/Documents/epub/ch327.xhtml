<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">SUBROUTINE</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="subroutine-statement" class="section level1">
<a class="dashingAutolink" name="autolink-326"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/SUBROUTINE"></a><h1 class="statement">SUBROUTINE</h1>
<p>SUBROUTINE statement is used at the start of any program that will be called externally by the <a href="#CALL">CALL</a> statement. It also declares any parameters to the compiler.</p>
<div id="command-syntax-276" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>SUB{ROUTINE} Name {({ MAT } variable{,{ MAT } variable...})}</code></pre>
</div>
<div id="syntax-elements-210" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p><strong>Name</strong> is the identifier by which the subroutine will be known to the compilation process. It should always be present as this name (not the source file name), will be used to call it by. However, if the name is left out, the compiler will name subroutine as the source file name (without suffixes). Default naming is not encouraged as it can cause problems if source files are renamed.</p>
<p>Each comma separated variable in the optional parenthesized list is used to identify parameters to the compiler. These variables will be assigned the values passed to the subroutine by a CALL statement.</p>
</div>
<div id="notes-174" class="section level2">
<h2>NOTES</h2>
<p>The SUBROUTINE statement must be the first code line in a subroutine.</p>
<p>All the variables declared using the <a href="#COMMON">COMMON</a> statement will be inherited providing an equivalent common area is declared within the subroutine source file. The program will fail to compile if the number of common variables used in each common area exceeds the number defined in the equivalent area in the main program.</p>
<p>Subroutines can only be called via the jBC <a href="#CALL">CALL</a> statement.</p>
<p><a href="#PRECISION">PRECISION</a> can be redefined but the new setting will not persist when the subroutine returns to the calling program.</p>
<p>The control will be returned to the CALLing program if the subroutine reaches the logical end of the program or a <a href="#RETURN">RETURN</a> is executed with no outstanding <a href="#GOSUB">GOSUB</a> statement.</p>
<p>The control will not be returned to the calling program if a <a href="#STOP">STOP</a> or <a href="#ABORT">ABORT</a> statement is executed.</p>
<p>See also: <a href="#CALL">CALL</a>, <a href="#CATALOG_Command">CATALOG Command</a>, <a href="#COMMON">COMMON</a>, <a href="#RETURN">RETURN</a>.</p>
</div>
<div id="examples-69" class="section level2">
<h2>EXAMPLES</h2>
<pre><code>SUBROUTINE DialUp(Number, MAT Results)
DIM Results(8)
....</code></pre>
</div>
</div>



</body></html>