<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">READPREV</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="readprev-statement" class="section level1">
<a class="dashingAutolink" name="autolink-278"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/READPREV"></a><h1 class="statement">READPREV</h1>
<p>This statement is syntactically similar to the <a href="#READNEXT">READNEXT</a> but it works in reverse order. There are some considerations when the direction is changed from forward search to backward search or vice-versa.</p>
<p>When <a href="#SELECT">SELECT</a> statement is first executed forward direction is assumed. Therefore if <a href="#SELECT">SELECT</a> is immediately followed by READPREV, then a change of direction is assumed.</p>
<p>During the <a href="#READNEXT">READNEXT</a> or READPREV sequence a next-key pointer is kept up to date. This is the record or index key to be used, should a <a href="#READNEXT">READNEXT</a> be executed.</p>
<p>During a change of direction from forward <a href="#READNEXT">READNEXT</a> to backward <a href="#READPREV">READPREV</a> then the next record key or index key read in by the READPREV will be the one preceding the next-key pointer.</p>
<p>When the select list is exhausted it will either point one before the start of the select list (if READPREVs have been executed) or one past the end of the select list (if READNEXTs have been executed). Thus in the event of a change of direction the very first or very last index key or record key will be used.</p>
<p>Behaviour of READNEXT/READPREV depends on emulation. The following example is for <em>jbase</em> emulation:</p>
<div id="example-162" class="section level2">
<h2>EXAMPLE</h2>
<p>Consider the following jBC code</p>
<pre><code>    list = &#34;DAVE&#34; :@FM: &#34;GREG&#34; :@FM: &#34;JIM&#34;
    SELECT list</code></pre>
<p>The following table shows what happens if you do <a href="#READNEXT">READNEXT</a>s and <a href="#READPREV">READPREV</a>s on the above code and the reasons for it.</p>
<table>
<thead>
<tr class="header">
<th align="left">Statements executed</th>
<th align="left">Result of operation</th>
<th align="left">Comments</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">READNEXT key ELSE</td>
<td align="left">key becomes &#34;DAVE&#34;</td>
<td align="left">key becomes &#34;DAVE&#34;</td>
</tr>
<tr class="even">
<td align="left">READNEXT key ELSE</td>
<td align="left">key becomes &#34;GREG&#34;</td>
<td align="left">Second key in list</td>
</tr>
<tr class="odd">
<td align="left">READPREV key ELSE</td>
<td align="left">key becomes &#34;DAVE&#34;</td>
<td align="left">Reversed so take preceding</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left"></td>
<td align="left">key</td>
</tr>
<tr class="odd">
<td align="left">READPREV key ELSE</td>
<td align="left">Take ELSE clause</td>
<td align="left">The next key ptr exhausted</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left"></td>
<td align="left">at start.</td>
</tr>
<tr class="odd">
<td align="left">READNEXT key ELSE</td>
<td align="left">key becomes &#34;DAVE&#34;</td>
<td align="left">First key in list</td>
</tr>
<tr class="even">
<td align="left">READNEXT key ELSE</td>
<td align="left">key becomes &#34;GREG&#34;</td>
<td align="left">Second key in list</td>
</tr>
<tr class="odd">
<td align="left">READNEXT key ELSE</td>
<td align="left">key becomes &#34;JIM&#34;</td>
<td align="left">Final key. Next key ptr</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left"></td>
<td align="left">exhausted.</td>
</tr>
<tr class="odd">
<td align="left">READPREV key ELSE</td>
<td align="left">key becomes &#34;JIM&#34;</td>
<td align="left">Reversed but list</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left"></td>
<td align="left">exhausted.</td>
</tr>
<tr class="odd">
<td align="left">READPREV key ELSE</td>
<td align="left">key becomes &#34;GREG&#34;</td>
<td align="left">Second key in list</td>
</tr>
<tr class="even">
<td align="left">READPREV key ELSE</td>
<td align="left">key becomes &#34;DAVE&#34;</td>
<td align="left">First key in list</td>
</tr>
</tbody>
</table>
</div>
<div id="example-2-12" class="section level2">
<h2>EXAMPLE 2</h2>
<p>This code shows the behaviour of READNEXT/READPREV under <em>prime</em> emulation. The difference to the example above starts with the first READPREV:</p>
<pre><code>   list = &#34;DAVE&#34; :@FM: &#34;GREG&#34; :@FM: &#34;JIM&#34;
   SELECT list
   READNEXT V.ID ELSE CRT &#39;READNEXT 1 FAILED&#39;
   CRT &#39;NEXT:&#39; : V.ID                              ;*  NEXT:DAVE
   READNEXT V.ID ELSE CRT &#39;READNEXT 2 FAILED&#39;
   CRT &#39;NEXT:&#39; : V.ID                              ;*  NEXT:GREG
   READPREV V.ID ELSE CRT &#39;READPREV 1 FAILED&#39;
   CRT &#39;PREVIOUS:&#39; : V.ID                          ;*  PREVIOUS:JIM
   READPREV V.ID ELSE CRT &#39;READPREV 2 FAILED&#39;      ;*  READPREV 2 FAILED
   CRT &#39;PREVIOUS:&#39; : V.ID                          ;*  PREVIOUS:
   READNEXT V.ID ELSE CRT &#39;READNEXT 3 FAILED&#39;      ;*  READNEXT 3 FAILED
   CRT &#39;NEXT:&#39; : V.ID                              ;*  NEXT:</code></pre>
</div>
</div>



</body></html>