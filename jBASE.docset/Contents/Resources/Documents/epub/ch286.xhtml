<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">READVU</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="readvu-statement" class="section level1">
<a class="dashingAutolink" name="autolink-285"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/READVU"></a><h1 class="statement">READVU</h1>
<p>READVU statement allows a program to read a specific field in a record in a previously opened file into a variable. It also respects record locking and locks the specified record for update.</p>
<div id="command-syntax-240" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>READVU variable1 FROM {variable2,} expression1, expression2 { SETTING setvar }  \
       { ON ERROR statements } { LOCKED statements } THEN | ELSE statements</code></pre>
</div>
<div id="syntax-elements-177" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p><strong>variable1</strong> is the identifier into which the record will be read.</p>
<p><strong>variable2</strong> if specified, should be a jBC variable that has previously been opened to a file using the OPEN statement. If variable2 is not specified then the default file is assumed.</p>
<p><strong>expression1</strong> should evaluate to a valid record key for the file.</p>
<p><strong>expression2</strong> should evaluate to a positive integer number. If the number is invalid or greater than the number of fields in the record, then a NULL string will be assigned to variable1. If the number is 0, then the readv0 emulation setting controls the value returned in variable1. If a non-numeric argument is evaluated a run time error will occur.</p>
<p>If the SETTING clause is specified and the read fails, setvar will be set to one of the following values:</p>
</div>
<div id="incremental-file-errors-14" class="section level2">
<h2>INCREMENTAL FILE ERRORS</h2>
<table>
<thead>
<tr class="header">
<th align="left">Code</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">128</td>
<td align="left">No such file or directory</td>
</tr>
<tr class="even">
<td align="left">4096</td>
<td align="left">Network error</td>
</tr>
<tr class="odd">
<td align="left">24576</td>
<td align="left">Permission denied</td>
</tr>
<tr class="even">
<td align="left">32768</td>
<td align="left">Physical I/O error or unknown error</td>
</tr>
</tbody>
</table>
<p>If ON ERROR is specified, the statements following the ON ERROR clause will be executed for any of the above Incremental File Errors except error 128.</p>
</div>
<div id="notes-148" class="section level2">
<h2>NOTES</h2>
<p>If the record could not be read because another process already had a lock on the record then one of two actions is taken. If the LOCKED clause was specified in the statement then the statements dependent on it are executed. If no LOCKED clause was specified then the statement blocks (hangs) until the other process releases the lock.</p>
<p>If the statement fails to read the record then any statements associated with the ELSE clause are executed. If the statement successfully reads the record then the statements associated with any THEN clause are executed. Either or both of the THEN and ELSE clauses must be specified with the statement.</p>
<p>The lock taken by the <a href="#READVU">READVU</a> statement will be released by any of the following events:</p>
<p>The same program with <a href="#WRITE">WRITE</a>, <a href="#WRITEV">WRITEV</a>, <a href="#MATWRITE">MATWRITE</a> or <a href="#DELETE">DELETE</a> statements writes to the record.</p>
<p>The record lock is released explicitly using the <a href="#RELEASE">RELEASE</a> statement.</p>
<p>The program stops normally or abnormally.</p>
<p>When a file is OPENed to a local file variable in a subroutine then the file is closed when the subroutine RETURNS so all locks taken on that file are released, including locks taken in a calling program. Files that are opened to <a href="#COMMON">COMMON</a> variables are not closed so the locks remain intact.</p>
<p>See also: <a href="#WRITE">WRITE</a>, <a href="#WRITEU">WRITEU</a>, <a href="#MATWRITE">MATWRITE</a>, <a href="#MATWRITEU">MATWRITEU</a>, <a href="#RELEASE">RELEASE</a>, and <a href="#DELETE">DELETE</a></p>
</div>
<div id="example-167" class="section level2">
<h2>EXAMPLE</h2>
<pre><code>OPEN &#34;Customers&#34; ELSE ABORT 201, &#34;Customers&#34;
OPEN &#34;DICT Customers&#34; TO DCusts ELSE
        ABORT 201, &#34;DICT Customers&#34;
END
LOOP
        READVU Rec FROM DCusts, &#34;Xref&#34;,7 LOCKED
          CRT &#34;Locked - retrying&#34;
          SLEEP 1; CONTINUE ;* Restart LOOP
        END THEN
        READ DataRec FROM Rec ELSE
            ABORT 202, Rec
       END
       BREAK ;*leave the LOOP
   END ELSE
       ABORT 202, &#34;Xref&#34;
   END
REPEAT</code></pre>
</div>
</div>



</body></html>