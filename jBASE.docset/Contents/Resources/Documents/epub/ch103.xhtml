<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta http-equiv="Content-Style-Type" content="text/css"/>
  <meta name="generator" content="pandoc"/>
  <title class="statement">DATA</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
</head>
<body>
<div id="data-statement" class="section level1">
<a class="dashingAutolink" name="autolink-102"></a><a class="dashAnchor" name="//apple_ref/cpp/Method/DATA"></a><h1 class="statement">DATA</h1>
<p>The DATA statement stacks the series of expressions on a terminal input FIFO stack. Terminal input statements will then treat this data as if entered at the keyboard.</p>
<div id="command-syntax-67" class="section level2">
<h2>COMMAND SYNTAX</h2>
<pre><code>DATA expression {, expression ...}</code></pre>
</div>
<div id="syntax-elements-38" class="section level2">
<h2>SYNTAX ELEMENTS</h2>
<p>The expression may evaluate to any data type; views each comma-separated expression as one line of terminal input.</p>
</div>
<div id="notes-41" class="section level2">
<h2>NOTES</h2>
<p>The data stacked for input will subsequently be treated as input by any jBC program. Therefore use it before PERFORM/EXECUTE, CHAIN or any other method of transferring program execution. Use also to stack input for the currently executing program; do not use to stack input back to an executing program.</p>
<p>When a jBC program detects stacked data, it is taken as keyboard input until the stack is exhausted. The program will then revert to the terminal device for subsequent terminal input.</p>
<p>Stacked data delimited by field marks (xFE) will be treated as a series of separate terminal inputs.</p>
<p>See also: <a href="#CLEARDATA">CLEARDATA</a></p>
</div>
<div id="example-66" class="section level2">
<h2>EXAMPLE</h2>
<p>Program test.b:</p>
<pre><code>   DATA &#39;12345&#39;
   DATA &#39;67890&#39;
   EXECUTE &#39;test2&#39;</code></pre>
<p>Program test2.b:</p>
<pre><code>   INPUT V.DATA1
   INPUT V.DATA2
   CRT &#39;I got &#39; : V.DATA1 : &#39; and &#39; : V.DATA2</code></pre>
<p>If test2 is run by itself, it asks for user input. If test is run, the output is:</p>
<pre>    I got 12345 and 67890</pre>
</div>
</div>



</body></html>